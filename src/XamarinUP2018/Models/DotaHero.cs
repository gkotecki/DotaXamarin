// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using XamarinUP2018.Models;
//
//    var hero = Hero.FromJson(jsonString);

namespace XamarinUP2018.Models
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Hero
    {
        [J("id", NullValueHandling = N.Ignore)] public long? Id { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("localized_name", NullValueHandling = N.Ignore)] public string LocalizedName { get; set; }
        [J("primary_attr", NullValueHandling = N.Ignore)] public string PrimaryAttr { get; set; }
        [J("attack_type", NullValueHandling = N.Ignore)] public string AttackType { get; set; }
        [J("roles", NullValueHandling = N.Ignore)] public List<string> Roles { get; set; }
        [J("img", NullValueHandling = N.Ignore)] public string Img { get; set; }
        [J("icon", NullValueHandling = N.Ignore)] public string Icon { get; set; }
        [J("base_health", NullValueHandling = N.Ignore)] public long? BaseHealth { get; set; }
        [J("base_health_regen")] public double? BaseHealthRegen { get; set; }
        [J("base_mana", NullValueHandling = N.Ignore)] public long? BaseMana { get; set; }
        [J("base_mana_regen", NullValueHandling = N.Ignore)] public double? BaseManaRegen { get; set; }
        [J("base_armor", NullValueHandling = N.Ignore)] public double? BaseArmor { get; set; }
        [J("base_mr", NullValueHandling = N.Ignore)] public long? BaseMr { get; set; }
        [J("base_attack_min", NullValueHandling = N.Ignore)] public long? BaseAttackMin { get; set; }
        [J("base_attack_max", NullValueHandling = N.Ignore)] public long? BaseAttackMax { get; set; }
        [J("base_str", NullValueHandling = N.Ignore)] public long? BaseStr { get; set; }
        [J("base_agi", NullValueHandling = N.Ignore)] public long? BaseAgi { get; set; }
        [J("base_int", NullValueHandling = N.Ignore)] public long? BaseInt { get; set; }
        [J("str_gain", NullValueHandling = N.Ignore)] public double? StrGain { get; set; }
        [J("agi_gain", NullValueHandling = N.Ignore)] public double? AgiGain { get; set; }
        [J("int_gain", NullValueHandling = N.Ignore)] public double? IntGain { get; set; }
        [J("attack_range", NullValueHandling = N.Ignore)] public long? AttackRange { get; set; }
        [J("projectile_speed", NullValueHandling = N.Ignore)] public long? ProjectileSpeed { get; set; }
        [J("attack_rate", NullValueHandling = N.Ignore)] public double? AttackRate { get; set; }
        [J("move_speed", NullValueHandling = N.Ignore)] public long? MoveSpeed { get; set; }
        [J("turn_rate", NullValueHandling = N.Ignore)] public double? TurnRate { get; set; }
        [J("cm_enabled", NullValueHandling = N.Ignore)] public bool? CmEnabled { get; set; }
        [J("legs", NullValueHandling = N.Ignore)] public long? Legs { get; set; }
        [J("pro_ban", NullValueHandling = N.Ignore)] public long? ProBan { get; set; }
        [J("hero_id", NullValueHandling = N.Ignore)] public long? HeroId { get; set; }
        [J("pro_win", NullValueHandling = N.Ignore)] public long? ProWin { get; set; }
        [J("pro_pick", NullValueHandling = N.Ignore)] public long? ProPick { get; set; }
        [J("2_pick", NullValueHandling = N.Ignore)] public long? The2_Pick { get; set; }
        [J("2_win", NullValueHandling = N.Ignore)] public long? The2_Win { get; set; }
        [J("null_pick", NullValueHandling = N.Ignore)] public long? NullPick { get; set; }
        [J("null_win", NullValueHandling = N.Ignore)] public long? NullWin { get; set; }
        [J("8_pick", NullValueHandling = N.Ignore)] public long? The8_Pick { get; set; }
        [J("8_win", NullValueHandling = N.Ignore)] public long? The8_Win { get; set; }
        [J("7_pick", NullValueHandling = N.Ignore)] public long? The7_Pick { get; set; }
        [J("7_win", NullValueHandling = N.Ignore)] public long? The7_Win { get; set; }
        [J("4_pick", NullValueHandling = N.Ignore)] public long? The4_Pick { get; set; }
        [J("4_win", NullValueHandling = N.Ignore)] public long? The4_Win { get; set; }
        [J("1_pick", NullValueHandling = N.Ignore)] public long? The1_Pick { get; set; }
        [J("1_win", NullValueHandling = N.Ignore)] public long? The1_Win { get; set; }
        [J("3_pick", NullValueHandling = N.Ignore)] public long? The3_Pick { get; set; }
        [J("3_win", NullValueHandling = N.Ignore)] public long? The3_Win { get; set; }
        [J("6_pick", NullValueHandling = N.Ignore)] public long? The6_Pick { get; set; }
        [J("6_win", NullValueHandling = N.Ignore)] public long? The6_Win { get; set; }
        [J("5_pick", NullValueHandling = N.Ignore)] public long? The5_Pick { get; set; }
        [J("5_win", NullValueHandling = N.Ignore)] public long? The5_Win { get; set; }
        public string ImgUrl { get => $"https://api.opendota.com{Img}"; }
        public string IconUrl { get => $"https://api.opendota.com{Icon}"; }
    }

    public partial class Hero
    {
        public static List<Hero> FromJson(string json) => JsonConvert.DeserializeObject<List<Hero>>(json, XamarinUP2018.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Hero> self) => JsonConvert.SerializeObject(self, XamarinUP2018.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
